// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	"github.com/abgeo/mailtm/pkg/dto"
	mock "github.com/stretchr/testify/mock"
)

// GitHubServiceInterface is an autogenerated mock type for the GitHubServiceInterface type
type GitHubServiceInterface struct {
	mock.Mock
}

// GetLatestRelease provides a mock function with given fields: owner, repo
func (_m *GitHubServiceInterface) GetLatestRelease(owner string, repo string) (*dto.Release, error) {
	ret := _m.Called(owner, repo)

	var r0 *dto.Release
	if rf, ok := ret.Get(0).(func(string, string) *dto.Release); ok {
		r0 = rf(owner, repo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Release)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(owner, repo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGitHubServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewGitHubServiceInterface creates a new instance of GitHubServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGitHubServiceInterface(t mockConstructorTestingTNewGitHubServiceInterface) *GitHubServiceInterface {
	mock := &GitHubServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
