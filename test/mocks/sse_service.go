// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	"github.com/abgeo/mailtm/pkg/dto"
	"github.com/stretchr/testify/mock"
)

// SSEServiceInterface is an autogenerated mock type for the SSEServiceInterface type
type SSEServiceInterface struct {
	mock.Mock
}

// SubscribeMessages provides a mock function with given fields: accountID, handler
func (_m *SSEServiceInterface) SubscribeMessages(accountID string, handler func(dto.MessagesItem)) error {
	ret := _m.Called(accountID, handler)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(dto.MessagesItem)) error); ok {
		r0 = rf(accountID, handler)
	} else {
		r0 = ret.Error(0)
	}

	message := dto.MessagesItem{
		Intro: "New Message",
	}
	message.ID = "mess005"
	message.Subject = "Message 3 Subject"
	message.From = dto.EmailAddress{
		Address: "baz@foo.bar",
		Name:    "Baz Foo",
	}
	handler(message)

	return r0
}

type mockConstructorTestingTNewSSEServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewSSEServiceInterface creates a new instance of SSEServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSSEServiceInterface(t mockConstructorTestingTNewSSEServiceInterface) *SSEServiceInterface {
	mock := &SSEServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
